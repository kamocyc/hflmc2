(declare-const re1 Int)
(declare-const re2 Int)
(declare-const x Int)
(declare-const l Int)
(declare-const r Int)
(declare-const xs Int)


(assert
  (or
    (not
      (and
        (or
          (and
            (>= xs -1)
            (= r 0)
            (= l 1)
            (>= (+ re1 (* -1 x)) 0)
            (>= (- re1 xs) 1)
            (>= (+ re1 x) 0)
            (>= (+ (- re2 xs) (* l -1)) 3)
          )
          (and
            (>= xs -1)
            (>= (- re1 xs))
            (>= re2 3)
            (>= (+ re2 (+ xs (* r -1))) 1)
            (>= (- (- re2 xs) l) 3)
          )
        )
        (or
          (and
            (>= xs 0)
            (= r 0)
            (= l 0)
            (>= (+ re1 (* -1 x)) 1)
            (>= (+ re1 (* -1 xs)) 1)
            (>= (+ re1 x) 1)
            (>= (+ re2 (+ (* xs -1) (* l -1))) 2)
          )
          (and
            (>= xs 0)
            (>= (+ re1 (* -1 xs)) 1)
            (>= re2 3)
            (>= (+ re2 (+ xs (* r -1))) 2)
            (>= (+ re2 (+ (* -1 xs) (* l -1))) 2)
          )
        )
      )
    )
    (or
      (and
        (>= xs -1)
        (= r 0)
        (= l 1)
        (>= (+ re1 (* -1 x)) 0)
        (>= (- re1 xs) 1)
        (>= (+ re1 x) 0)
        (>= (+ (- re2 xs) (* l -1)) 3)
      )
      (and
        (>= xs -1)
        (>= (- re1 xs))
        (>= re2 3)
        (>= (+ re2 (+ xs (* r -1))) 1)
        (>= (- (- re2 xs) l) 3)
      )
    )
  )
)
(check-sat)








;(assert (or
;  (not (or
;    (and
;      (>= xs -1)
;      (= r 0)
;      (= l 1)
;      (>= (+ re1 (* -1 x)) 0)
;      (>= (- re1 xs) 1)
;      (>= (+ re1 x) 0)
;      (>= (+ (- re2 xs) (* l -1)) 3)
;    )
;    (and
;      (>= xs -1)
;      (>= (- re1 xs))
;      (>= re2 3)
;      (>= (+ re2 (+ xs (* r -1))) 1)
;      (>= (- (- re2 xs) l) 3)
;    )
;  ))
;  (or
;    (and
;      (>= xs 0)
;      (= r 0)
;      (= l 0)
;      (>= (+ re1 (* -1 x)) 1)
;      (>= (+ re1 (* -1 xs)) 1)
;      (>= (+ re1 x) 1)
;      (>= (+ re2 (+ (* xs -1) (* l -1))) 2)
;    )
;    (and
;      (>= xs 0)
;      (>= (+ re1 (* -1 xs)) 1)
;      (>= re2 3)
;      (>= (+ re2 (+ xs (* r -1))) 2)
;      (>= (+ re2 (+ (* -1 xs) (* l -1))) 2)
;    )
;  )
;))
;(check-sat)



; (
;   xs >= -1 /\
;   r=0 /\
;   l=1 /\
;   re1 + -1 * x>=0 /\
;   re1 - xs>=1 /\
;   re1 + x>=0 /\
;   re2 - xs + l * -1>=3
; ) \/ (
;   xs >= -1 /\
;   re1 - xs >= 1 /\
;   re2>=3 /\
;   re2 + xs + r * -1>=1 /\
;   re2 - xs - l>=3
; )